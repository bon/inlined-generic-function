
* Inlined-Generic-Function

Generic functions are convenient but slow.  During the development we
usually want the full dynamic feature of CLOS. However, when we really need
a fast binary and do not need the dynamism, the dynamic dispatch in the
generic functions should be statically compiled away.

We propose a MOP-based implementation of fast inlined generic functions
dispatched in compile-time. The amount required to inline your generic
function is minimal. Although it currently supports only the =:around= and
primary methods of the standard method combination defined in ANSI CL,
empirical analysis showed that the resulting code is up to *10 times*
faster than the normal generic function invocation.

** Usage

The example code here is in =t/playground.lisp=.

First, declare the generic function with =inlined-generic-function=
metaclass.  This metaclass is a subclass of
=standard-generic-function=. Therefore, unless you use its special feature,
it acts exactly the same as the normal generic functions.

#+BEGIN_SRC lisp
(defgeneric plus (a b)
  (:generic-function-class inlined-generic-function))
#+END_SRC

Define the methods as usual.

#+BEGIN_SRC lisp
(defmethod plus :around ((a number) (b number))
  (format t "~&(plus ~a ~a) is called~&" (type-of a) (type-of b))
  (call-next-method))

(defmethod plus ((a fixnum) (b fixnum))
  (+ a b))
(defmethod plus ((a float) (b float))
  (+ a b))
#+END_SRC

Define a function which uses it.

#+BEGIN_SRC lisp
(defun func-using-plus (a b)
  (plus a b))
#+END_SRC

At this point the gf is not inlined.

#+BEGIN_SRC lisp
; disassembly for FUNC-USING-PLUS
; Size: 35 bytes. Origin: #x10077272DB
; DB:       498B4C2460       MOV RCX, [R12+96]                ; thread.binding-stack-pointer
                                                              ; no-arg-parsing entry point
; E0:       48894DF8         MOV [RBP-8], RCX
; E4:       498BD0           MOV RDX, R8
; E7:       488BFE           MOV RDI, RSI
; EA:       488B058FFFFFFF   MOV RAX, [RIP-113]               ; #<FDEFINITION for PLUS>
; F1:       B904000000       MOV ECX, 4
; F6:       FF7508           PUSH QWORD PTR [RBP+8]
; F9:       FF6009           JMP QWORD PTR [RAX+9]
; FC:       CC10             BREAK 16                         ; Invalid argument count trap
#+END_SRC

Now its time to inline the gf. There's nothing different from inlining a normal function.
In order to inline the generic function, just declare it =inline= when you use it.

#+BEGIN_SRC lisp
(defun func-using-plus (a b)
  (declare (inline plus))
  (plus a b))
; disassembly for FUNC-USING-PLUS
; Size: 1087 bytes. Origin: #x100824F8C1
; 8C1:       498B4C2460       MOV RCX, [R12+96]               ; thread.binding-stack-pointer
                                                              ; no-arg-parsing entry point
; 8C6:       48894DF8         MOV [RBP-8], RCX
; 8CA:       488B4DE0         MOV RCX, [RBP-32]
; 8CE:       80F919           CMP CL, 25
; 8D1:       7415             JEQ L0
; 8D3:       8D41F1           LEA EAX, [RCX-15]
; .....
#+END_SRC

To see the actual compiler-macro expansion, use =inline-generic-function=.

#+BEGIN_SRC lisp
(let ((*features* (cons :inline-generic-function *features*)))
  (print (inline-generic-function '(plus a b))))

;; Inlining a generic function PLUS

(LET ((#:A1734 (1+ A)) (#:B1735 (1- B)))
  (EMATCH* (#:A1734 #:B1735)
    (((TYPE FLOAT) (TYPE FLOAT))
     (LET ((A #:A1734) (B #:B1735))
       (DECLARE (TYPE FLOAT A))
       (DECLARE (TYPE FLOAT B))
       (FORMAT T "~&(plus ~a ~a) is called~&" (TYPE-OF A) (TYPE-OF B))
       (LET ((A #:A1734) (B #:B1735))
         (DECLARE (TYPE FLOAT A))
         (DECLARE (TYPE FLOAT B))
         (+ A B))))
    (((TYPE FIXNUM) (TYPE FIXNUM))
     (LET ((A #:A1734) (B #:B1735))
       (DECLARE (TYPE FIXNUM A))
       (DECLARE (TYPE FIXNUM B))
       (FORMAT T "~&(plus ~a ~a) is called~&" (TYPE-OF A) (TYPE-OF B))
       (LET ((A #:A1734) (B #:B1735))
         (DECLARE (TYPE FIXNUM A))
         (DECLARE (TYPE FIXNUM B))
         (+ A B))))))
#+END_SRC

# Since =ematch= from Trivia pattern matcher expands into thoroughly typed
# dispatching code, a sufficiently smart compiler would compile =+= into
# machine assembly, which is the case at least in SBCL.

Note that this expansion does not contain the dispatch for =(NUMBER
NUMBER)= because it does not have the primary function and therefore
signals an error in the ordinary generic function. This behavior is instead
covered by the error signalled by =EMATCH=.

Next, marking the usage =inline= is not so useful when you inline *all*
generic functions (with metaclass =inlined-generic-function=) in order to
build a highly optimized executable binary, because it would be painful to
search around the use of all generic functions and add an inline
declaration one by one. Also, during the development you generally do not
want to make them inlined, since the inlined code becomes obsoleted when the
generic function changes.

Therefore, the compiler macro recognizes =:inline-generic-function= flag in
=*features*=. When this feature is present, all inlinable generic functions
are inlined unless it is declared =notinline=. When declared =notinline=,
the compiler macro declines and the code returns to the normal behavior.

#+BEGIN_SRC lisp
(push :inline-generic-function *features*)
#+END_SRC

Currently it supports the standard method combination with =:around= methods
and the primary methods only.  Extensions are future work.

** Benchmark Setting

We tested two generic functions, one of which is a
standard-generic-function, and another is an inlined-generic-function.

Both generic functions follow the definition below:

#+BEGIN_SRC lisp
(defgeneric plus (a b)
  [(:generic-function-class inlined-generic-function)])
(defmethod plus :around ((a number) (b number))
  (+ a b)
  (call-next-method))
(defmethod plus ((a fixnum) (b fixnum))
  (+ a b))
(defmethod plus ((a double-float) (b double-float))
  (+ a b))
#+END_SRC

We tested them with and without =inline= declaration, i.e., 

#+BEGIN_SRC lisp
(defun func-using-plus (a b)
  (declare (optimize (speed 3) (safety 0)))
  (plus a b))

(defun func-using-inlined-plus (a b)
  (declare (inline plus))
  (declare (optimize (speed 3) (safety 0)))
  (plus a b))
#+END_SRC

Thus, we have 4 configurations in total.  The experiment is run under AMD
Phenom II X6 processor 2.8GHz with SBCL 1.3.1 (launched by Roswell).
The benchmark function is shown below:

#+BEGIN_SRC lisp
(defvar *input* (iter (repeat 1000)
                     (collect (cons (random 100.0d0) (random 100.0d0)))
                     (collect (cons (+ 20 (random 100)) (+ 20 (random 100))))))
(defun benchmark ()
  (time (iter (for (a . b) in *input*)
              (func-using-normal-plus a b)))
  (time (iter (for (a . b) in *input*)
              (func-using-normal-inlined-plus a b)))
  (time (iter (for (a . b) in *input*)
              (func-using-plus a b)))
  (time (iter (for (a . b) in *input*)
              (func-using-inlined-plus a b))))
#+END_SRC

We first run the benchmark function 1000 times in order to calibrate the CPU cache.
We then run the gc and invoke the benchmark function once more.
We use the result of this final run in order to make sure the machine state is stabilized.

** Result

Since the difference in the runtime is relatively small due to the small
amount of computation, we consider the processor cycles only.  We found
that the cost of generic function invocation is considerably low when an
=inlined-generic-function= is invoked with =inline= declaration.

| metaclass and inline declaration       | processor cycles | consing |
|----------------------------------------+------------------+---------|
| standard-generic-function, not inlined |          742,285 |       0 |
| standard-generic-function, inlined     |          726,023 |       0 |
| inlined-generic-function, not inlined  |        7,865,080 | 523,760 |
| inlined-generic-function, inlined      |         *74,120* |       0 |

Note that the third case, where the =inlined-generic-function= is not
inlined, is slower than the normal generic function. This would be because
we use the non-standard metaclass for representing the generic function and
the normal optimization provided by the implementation is not performed.
However, this is not a problem because we consider the third case only takes
place during the development.

** Conclusion

We showed that ... well, anyway, this is not a paper. Enjoy!

** Dependencies

This library is at least tested on implementation listed below:

+ SBCL 1.3.1 on X86-64 Linux  3.19.0-39-generic (author's environment)

Also, it depends on the following libraries:

+ trivia by Masataro Asai ::
    NON-optimized pattern matcher compatible with OPTIMA, with extensible optimizer interface and clean codebase

+ closer-mop by Pascal Costanza ::
    Closer to MOP is a compatibility layer that rectifies many of the absent or incorrect CLOS MOP features across a broad range of Common Lisp implementations.

+ alexandria by  ::
    Alexandria is a collection of portable public domain utilities.

+ iterate by  ::
    Jonathan Amsterdam's iterator/gatherer/accumulator facility


** Installation

I plan to submit it to Quicklisp in January 2016.

** Author

+ Masataro Asai (guicho2.71828@gmail.com)

* Copyright

Copyright (c) 2015 Masataro Asai (guicho2.71828@gmail.com)


* License

Licensed under the LLGPL License.



